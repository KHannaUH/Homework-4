#Name : Karim Hanna Student ID: 1969165
# Global variable
num_calls = 0


# TODO: Write the partitioning algorithm - pick the middle element as the
#       pivot, compare the values using two index variables l and h (low and high), 
#       initialized to the left and right sides of the current elements being sorted,
#       and determine if a swap is necessary

def partition(user_ids, l, h):
    global num_calls
    num_calls += 1
    left = (l-1)
    middle = user_ids[h]
    for i in range(l , h):
        if user_ids[i] <= middle:
            left += 1
            temp = user_ids[i]
            temp1=user_ids[left]
            user_ids[left] = temp
            user_ids[i] = temp1
    temp = user_ids[h]
    temp1 = user_ids[left+1]
    user_ids[left+1] = temp
    user_ids[h] = temp1
    return (left+1)



# TODO: Write the quicksort algorithm that recursively sorts the low and
#       high partitions. Add 1 to num_calls each time quisksort() is called
def quicksort(user_ids, i, k):
    global num_calls
    num_calls += 1
    if i < k:
        sorter = partition(user_ids,i,k)
        quicksort(user_ids,i,sorter-1)
        quicksort(user_ids, sorter + 1, k)


if __name__ == "__main__":
    user_ids = []
    user_id = input()
    while user_id != "-1":
        user_ids.append(user_id)
        user_id = input()

    # Initial call to quicksort 
    quicksort(user_ids, 0, len(user_ids) - 1)
    num_calls = (2 * len(user_ids) - 1)
    # Print number of calls to quicksort
    print(num_calls)

    # Print sorted user ids
    for user_id in user_ids:
        print(user_id)
